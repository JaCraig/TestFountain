{
  "api/Microsoft.Extensions.DependencyInjection.CanisterMethods.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CanisterMethods.html",
    "title": "Class CanisterMethods | TestFountain API Reference",
    "keywords": "Class CanisterMethods Namespace Microsoft.Extensions.DependencyInjection Assembly TestFountain.dll Canister methods public static class CanisterMethods Inheritance object CanisterMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterTestFountain(ICanisterConfiguration?) Registers the system with canister. public static ICanisterConfiguration? RegisterTestFountain(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | TestFountain API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes CanisterMethods Canister methods"
  },
  "api/TestFountain.CanisterModules.GeneratorModule.html": {
    "href": "api/TestFountain.CanisterModules.GeneratorModule.html",
    "title": "Class GeneratorModule | TestFountain API Reference",
    "keywords": "Class GeneratorModule Namespace TestFountain.CanisterModules Assembly TestFountain.dll Generator module public class GeneratorModule : IModule Inheritance object GeneratorModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Generator module Methods Load(IServiceCollection) Loads the module using the service collection. public void Load(IServiceCollection serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors. See Also IModule"
  },
  "api/TestFountain.CanisterModules.html": {
    "href": "api/TestFountain.CanisterModules.html",
    "title": "Namespace TestFountain.CanisterModules | TestFountain API Reference",
    "keywords": "Namespace TestFountain.CanisterModules Classes GeneratorModule Generator module"
  },
  "api/TestFountain.DataSources.DefaultDataSource.html": {
    "href": "api/TestFountain.DataSources.DefaultDataSource.html",
    "title": "Class DefaultDataSource | TestFountain API Reference",
    "keywords": "Class DefaultDataSource Namespace TestFountain.DataSources Assembly TestFountain.dll Default data source. public class DefaultDataSource : IDatasource Inheritance object DefaultDataSource Implements IDatasource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of the DefaultDataSource class. Constructors DefaultDataSource(SerialBox) Default data source. public DefaultDataSource(SerialBox serialBox) Parameters serialBox SerialBox The serial box. Remarks Initializes a new instance of the DefaultDataSource class. See Also IDatasource Properties SerialBox Gets the serial box. public SerialBox SerialBox { get; } Property Value SerialBox The serial box. Methods Read(MethodInfo) Retrieves the data for the specified method. public List<object?[]> Read(MethodInfo method) Parameters method MethodInfo The method. Returns List<object[]> The list of data for the method. Save(MethodInfo, object?[]) Saves the specified param data for the method. public void Save(MethodInfo method, object?[] paramData) Parameters method MethodInfo The method. paramData object[] The parameter data. See Also IDatasource"
  },
  "api/TestFountain.DataSources.Interfaces.IDatasource.html": {
    "href": "api/TestFountain.DataSources.Interfaces.IDatasource.html",
    "title": "Interface IDatasource | TestFountain API Reference",
    "keywords": "Interface IDatasource Namespace TestFountain.DataSources.Interfaces Assembly TestFountain.dll Data source interface public interface IDatasource Methods Read(MethodInfo) Retrieves the data for the specified method. List<object?[]> Read(MethodInfo method) Parameters method MethodInfo The method. Returns List<object[]> The list of data for the method. Save(MethodInfo, object?[]) Saves the specified param data for the method. void Save(MethodInfo method, object?[] paramData) Parameters method MethodInfo The method. paramData object[] The parameter data."
  },
  "api/TestFountain.DataSources.Interfaces.html": {
    "href": "api/TestFountain.DataSources.Interfaces.html",
    "title": "Namespace TestFountain.DataSources.Interfaces | TestFountain API Reference",
    "keywords": "Namespace TestFountain.DataSources.Interfaces Interfaces IDatasource Data source interface"
  },
  "api/TestFountain.DataSources.Serializers.JsonNetSerializer.html": {
    "href": "api/TestFountain.DataSources.Serializers.JsonNetSerializer.html",
    "title": "Class JsonNetSerializer | TestFountain API Reference",
    "keywords": "Class JsonNetSerializer Namespace TestFountain.DataSources.Serializers Assembly TestFountain.dll JSON.Net Serializer public class JsonNetSerializer : SerializerBase<string>, ISerializer<string>, ISerializer Inheritance object SerializerBase<string> JsonNetSerializer Implements ISerializer<string> ISerializer Inherited Members SerializerBase<string>.ReturnType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentType Content type (MIME type) public override string ContentType { get; } Property Value string JSON.Net Serializer FileType Common file type (extension) public override string FileType { get; } Property Value string JSON.Net Serializer Name Name of the serializer public override string Name { get; } Property Value string JSON.Net Serializer Methods Deserialize(Type, string) Deserializes the data public override object? Deserialize(Type objectType, string data) Parameters objectType Type Object type data string Data to deserialize Returns object The deserialized data Serialize(Type, object?) Serializes the object public override string Serialize(Type objectType, object? data) Parameters objectType Type Object type data object Data to serialize Returns string The serialized data See Also SerializerBase<T>"
  },
  "api/TestFountain.DataSources.Serializers.html": {
    "href": "api/TestFountain.DataSources.Serializers.html",
    "title": "Namespace TestFountain.DataSources.Serializers | TestFountain API Reference",
    "keywords": "Namespace TestFountain.DataSources.Serializers Classes JsonNetSerializer JSON.Net Serializer"
  },
  "api/TestFountain.DataSources.html": {
    "href": "api/TestFountain.DataSources.html",
    "title": "Namespace TestFountain.DataSources | TestFountain API Reference",
    "keywords": "Namespace TestFountain.DataSources Classes DefaultDataSource Default data source."
  },
  "api/TestFountain.Exceptions.GeneratorException.html": {
    "href": "api/TestFountain.Exceptions.GeneratorException.html",
    "title": "Class GeneratorException | TestFountain API Reference",
    "keywords": "Class GeneratorException Namespace TestFountain.Exceptions Assembly TestFountain.dll Generator exception public class GeneratorException : Exception, ISerializable Inheritance object Exception GeneratorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GeneratorException() Initializes a new instance of the GeneratorException class. public GeneratorException() GeneratorException(SerializationInfo, StreamingContext) Initializes a new instance of the GeneratorException class. protected GeneratorException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. GeneratorException(string) Initializes a new instance of the GeneratorException class. public GeneratorException(string message) Parameters message string The message that describes the error. GeneratorException(string, Exception) Initializes a new instance of the GeneratorException class. public GeneratorException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. See Also Exception"
  },
  "api/TestFountain.Exceptions.html": {
    "href": "api/TestFountain.Exceptions.html",
    "title": "Namespace TestFountain.Exceptions | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Exceptions Classes GeneratorException Generator exception"
  },
  "api/TestFountain.FountainDataAttribute.html": {
    "href": "api/TestFountain.FountainDataAttribute.html",
    "title": "Class FountainDataAttribute | TestFountain API Reference",
    "keywords": "Class FountainDataAttribute Namespace TestFountain Assembly TestFountain.dll Data generator class used in theory methods. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public sealed class FountainDataAttribute : DataAttribute Inheritance object Attribute DataAttribute FountainDataAttribute Inherited Members DataAttribute.Skip Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FountainDataAttribute(int, int) Initializes a new instance of the FountainDataAttribute class. public FountainDataAttribute(int count, int maxDuration = 2147483647) Parameters count int The number of items to generate. maxDuration int The duration in ms. (overrides the count) Properties Count Gets the count. public int Count { get; } Property Value int The count. MaxDuration Gets the duration. public int MaxDuration { get; } Property Value int The duration. Methods GetData(MethodInfo) Returns the data to be used to test the theory. public override IEnumerable<object?[]> GetData(MethodInfo testMethod) Parameters testMethod MethodInfo The method that is being tested Returns IEnumerable<object[]> One or more sets of theory data. Each invocation of the test method is represented by a single object array. See Also DataAttribute"
  },
  "api/TestFountain.Generator.DefaultGenerators.BoundaryGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.BoundaryGenerator.html",
    "title": "Class BoundaryGenerator | TestFountain API Reference",
    "keywords": "Class BoundaryGenerator Namespace TestFountain.Generator.DefaultGenerators Assembly TestFountain.dll Boundary generator public class BoundaryGenerator : IGenerator Inheritance object BoundaryGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoundaryGenerator(Random) Initializes a new instance of the BoundaryGenerator class. public BoundaryGenerator(Random random) Parameters random Random The random. Methods CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo) Generates the next object of the specified parameter type. public object Next(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns object The next object. See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.DefaultGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.DefaultGenerator.html",
    "title": "Class DefaultGenerator | TestFountain API Reference",
    "keywords": "Class DefaultGenerator Namespace TestFountain.Generator.DefaultGenerators Assembly TestFountain.dll Default generator public class DefaultGenerator : IGenerator Inheritance object DefaultGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of the DefaultGenerator class. Constructors DefaultGenerator(Random) Default generator public DefaultGenerator(Random random) Parameters random Random The random. Remarks Initializes a new instance of the DefaultGenerator class. See Also IGenerator Methods CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo) Generates the next object of the specified parameter type. public object? Next(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns object The next object. See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.DefaultValueGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.DefaultValueGenerator.html",
    "title": "Class DefaultValueGenerator | TestFountain API Reference",
    "keywords": "Class DefaultValueGenerator Namespace TestFountain.Generator.DefaultGenerators Assembly TestFountain.dll Default value generator public class DefaultValueGenerator : IGenerator Inheritance object DefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo) Generates the next object of the specified parameter type. public object? Next(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns object The next object. See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.InterfaceGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.InterfaceGenerator.html",
    "title": "Class InterfaceGenerator | TestFountain API Reference",
    "keywords": "Class InterfaceGenerator Namespace TestFountain.Generator.DefaultGenerators Assembly TestFountain.dll Interface generator public class InterfaceGenerator : IGenerator Inheritance object InterfaceGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo) Generates the next object of the specified parameter type. public object Next(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns object The next object. See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html",
    "title": "Class ParameterDefaultValueGenerator | TestFountain API Reference",
    "keywords": "Class ParameterDefaultValueGenerator Namespace TestFountain.Generator.DefaultGenerators Assembly TestFountain.dll Parameter default value generator public class ParameterDefaultValueGenerator : IGenerator Inheritance object ParameterDefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo) Generates the next object of the specified parameter type. public object? Next(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns object The next object. See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.html",
    "title": "Namespace TestFountain.Generator.DefaultGenerators | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Generator.DefaultGenerators Classes BoundaryGenerator Boundary generator DefaultGenerator Default generator DefaultValueGenerator Default value generator InterfaceGenerator Interface generator ParameterDefaultValueGenerator Parameter default value generator"
  },
  "api/TestFountain.Generator.GeneratorManager.html": {
    "href": "api/TestFountain.Generator.GeneratorManager.html",
    "title": "Class GeneratorManager | TestFountain API Reference",
    "keywords": "Class GeneratorManager Namespace TestFountain.Generator Assembly TestFountain.dll Generator manager public class GeneratorManager Inheritance object GeneratorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of the GeneratorManager class. Constructors GeneratorManager(IEnumerable<IGenerator>, Random) Generator manager public GeneratorManager(IEnumerable<IGenerator> generators, Random random) Parameters generators IEnumerable<IGenerator> The generators. random Random The random. Remarks Initializes a new instance of the GeneratorManager class. Properties Generators Gets the generators. public IEnumerable<IGenerator> Generators { get; } Property Value IEnumerable<IGenerator> The generators. Random Gets the random. public Random Random { get; } Property Value Random The random. Methods Next(ParameterInfo[]) Gets the next set of parameter values. public object?[] Next(ParameterInfo[] parameters) Parameters parameters ParameterInfo[] The parameters. Returns object[] The values."
  },
  "api/TestFountain.Generator.Interfaces.IGenerator.html": {
    "href": "api/TestFountain.Generator.Interfaces.IGenerator.html",
    "title": "Interface IGenerator | TestFountain API Reference",
    "keywords": "Interface IGenerator Namespace TestFountain.Generator.Interfaces Assembly TestFountain.dll Generator interface. public interface IGenerator Methods CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. bool CanGenerate(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo) Generates the next object of the specified parameter type. object? Next(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Returns object The next object."
  },
  "api/TestFountain.Generator.Interfaces.html": {
    "href": "api/TestFountain.Generator.Interfaces.html",
    "title": "Namespace TestFountain.Generator.Interfaces | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Generator.Interfaces Interfaces IGenerator Generator interface."
  },
  "api/TestFountain.Generator.html": {
    "href": "api/TestFountain.Generator.html",
    "title": "Namespace TestFountain.Generator | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Generator Classes GeneratorManager Generator manager"
  },
  "api/TestFountain.html": {
    "href": "api/TestFountain.html",
    "title": "Namespace TestFountain | TestFountain API Reference",
    "keywords": "Namespace TestFountain Classes FountainDataAttribute Data generator class used in theory methods."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | TestFountain API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | TestFountain API Reference",
    "keywords": "Code using System.ComponentModel.DataAnnotations; using Xunit; namespace TestFountain.Example { public class ExampleClass { /// <summary> /// Runs 10 tests with random values for a and b. /// </summary> /// <param name=\"a\">a, values will be in the range of 0 to 1000.</param> /// <param name=\"b\">b, values will be in the range of 0 to 1000.</param> [Theory] [FountainData(10)] public void Method1([Range(0, 1000)] int a, [Range(0, 1000)] int b) { Assert.True(a is >= 0 and <= 1000); Assert.True(b is >= 0 and <= 1000); } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "TestFountain | TestFountain API Reference",
    "keywords": "TestFountain TestFountain is a C# library that provides an attribute for xUnit.Net to generate random test data. It aims to simplify the process of generating diverse and comprehensive test cases by automatically creating random input values for your xUnit.Net tests. Features Random Data Generation: TestFountain allows you to easily generate random test data for your xUnit.Net tests. By using the FountainDataAttribute, you can annotate your test methods and have them automatically receive randomized input parameters. Customization: You can customize the generated data by specifying the data type, range, length, and other attributes using various options provided by TestFountain. Simplified Test Cases: With TestFountain, you no longer need to manually define and manage multiple test cases. It generates a wide range of test inputs automatically, allowing you to focus on writing assertions and verifying the behavior of your code. Getting Started Prerequisites .NET 6 Installation You can install TestFountain via NuGet package manager or by adding a reference to your project file. Using NuGet Package Manager Open the NuGet Package Manager Console in Visual Studio. Execute the following command: Install-Package TestFountain Adding a Reference Right-click on your project in Visual Studio. Select \"Manage NuGet Packages.\" Search for \"TestFountain\" and click on \"Install.\" Usage To use TestFountain in your xUnit.Net tests, follow these steps: Annotate your test method with the RandomDataAttribute and specify the desired options: [Theory] [FountainData] public void MyRandomTestMethod(int randomNumber, string randomString) { // Use the random values for testing } In this example, randomNumber and randomString will be automatically populated with random values each time the test runs. Customize the generated data by using the available options. For example: [Theory] [FountainData(10)] public void MyRandomTestMethod(int randomNumber) { // Use the random integer value between 0 and 100 for testing } Run your xUnit.Net tests as usual, and TestFountain will generate random test data for your annotated test methods."
  }
}