{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | TestFountain API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "api/Microsoft.Extensions.DependencyInjection.CanisterMethods.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CanisterMethods.html",
    "title": "Class CanisterMethods | TestFountain API Reference",
    "keywords": "Class CanisterMethods Canister methods Inheritance object CanisterMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: TestFountain.dll Syntax public static class CanisterMethods Methods | Improve this Doc View Source RegisterTestFountain(ICanisterConfiguration?) Registers the system with canister. Declaration public static ICanisterConfiguration? RegisterTestFountain(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | TestFountain API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes CanisterMethods Canister methods"
  },
  "api/TestFountain.CanisterModules.GeneratorModule.html": {
    "href": "api/TestFountain.CanisterModules.GeneratorModule.html",
    "title": "Class GeneratorModule | TestFountain API Reference",
    "keywords": "Class GeneratorModule Generator module Inheritance object GeneratorModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.CanisterModules Assembly: TestFountain.dll Syntax public class GeneratorModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection) Loads the module using the service collection. Declaration public void Load(IServiceCollection serviceDescriptors) Parameters Type Name Description IServiceCollection serviceDescriptors The service descriptors. See Also IModule Implements IModule See Also IModule"
  },
  "api/TestFountain.CanisterModules.html": {
    "href": "api/TestFountain.CanisterModules.html",
    "title": "Namespace TestFountain.CanisterModules | TestFountain API Reference",
    "keywords": "Namespace TestFountain.CanisterModules Classes GeneratorModule Generator module"
  },
  "api/TestFountain.DataSources.DefaultDataSource.html": {
    "href": "api/TestFountain.DataSources.DefaultDataSource.html",
    "title": "Class DefaultDataSource | TestFountain API Reference",
    "keywords": "Class DefaultDataSource Default data source. Inheritance object DefaultDataSource Implements IDatasource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.DataSources Assembly: TestFountain.dll Syntax public class DefaultDataSource : IDatasource Constructors | Improve this Doc View Source DefaultDataSource(SerialBox) Initializes a new instance of the DefaultDataSource class. Declaration public DefaultDataSource(SerialBox serialBox) Parameters Type Name Description SerialBox serialBox The serial box. See Also IDatasource Properties | Improve this Doc View Source SerialBox Gets the serial box. Declaration public SerialBox SerialBox { get; } Property Value Type Description SerialBox The serial box. See Also IDatasource Methods | Improve this Doc View Source Read(MethodInfo) Retrieves the data for the specified method. Declaration public List<object?[]> Read(MethodInfo method) Parameters Type Name Description MethodInfo method The method. Returns Type Description List<object[]> The list of data for the method. See Also IDatasource | Improve this Doc View Source Save(MethodInfo, object?[]) Saves the specified param data for the method. Declaration public void Save(MethodInfo method, object?[] paramData) Parameters Type Name Description MethodInfo method The method. object[] paramData The parameter data. See Also IDatasource Implements IDatasource See Also IDatasource"
  },
  "api/TestFountain.DataSources.html": {
    "href": "api/TestFountain.DataSources.html",
    "title": "Namespace TestFountain.DataSources | TestFountain API Reference",
    "keywords": "Namespace TestFountain.DataSources Classes DefaultDataSource Default data source."
  },
  "api/TestFountain.DataSources.Interfaces.html": {
    "href": "api/TestFountain.DataSources.Interfaces.html",
    "title": "Namespace TestFountain.DataSources.Interfaces | TestFountain API Reference",
    "keywords": "Namespace TestFountain.DataSources.Interfaces Interfaces IDatasource Data source interface"
  },
  "api/TestFountain.DataSources.Interfaces.IDatasource.html": {
    "href": "api/TestFountain.DataSources.Interfaces.IDatasource.html",
    "title": "Interface IDatasource | TestFountain API Reference",
    "keywords": "Interface IDatasource Data source interface Namespace: TestFountain.DataSources.Interfaces Assembly: TestFountain.dll Syntax public interface IDatasource Methods | Improve this Doc View Source Read(MethodInfo) Retrieves the data for the specified method. Declaration List<object?[]> Read(MethodInfo method) Parameters Type Name Description MethodInfo method The method. Returns Type Description List<object[]> The list of data for the method. | Improve this Doc View Source Save(MethodInfo, object?[]) Saves the specified param data for the method. Declaration void Save(MethodInfo method, object?[] paramData) Parameters Type Name Description MethodInfo method The method. object[] paramData The parameter data."
  },
  "api/TestFountain.DataSources.Serializers.html": {
    "href": "api/TestFountain.DataSources.Serializers.html",
    "title": "Namespace TestFountain.DataSources.Serializers | TestFountain API Reference",
    "keywords": "Namespace TestFountain.DataSources.Serializers Classes JsonNetSerializer JSON.Net Serializer"
  },
  "api/TestFountain.DataSources.Serializers.JsonNetSerializer.html": {
    "href": "api/TestFountain.DataSources.Serializers.JsonNetSerializer.html",
    "title": "Class JsonNetSerializer | TestFountain API Reference",
    "keywords": "Class JsonNetSerializer JSON.Net Serializer Inheritance object SerializerBase<string> JsonNetSerializer Implements ISerializer<string> ISerializer Inherited Members SerializerBase<string>.ReturnType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.DataSources.Serializers Assembly: TestFountain.dll Syntax public class JsonNetSerializer : SerializerBase<string>, ISerializer<string>, ISerializer Properties | Improve this Doc View Source ContentType Content type (MIME type) Declaration public override string ContentType { get; } Property Value Type Description string Overrides SerialBox.BaseClasses.SerializerBase<string>.ContentType See Also SerializerBase<T> | Improve this Doc View Source FileType Common file type (extension) Declaration public override string FileType { get; } Property Value Type Description string Overrides SerialBox.BaseClasses.SerializerBase<string>.FileType See Also SerializerBase<T> | Improve this Doc View Source Name Name of the serializer Declaration public override string Name { get; } Property Value Type Description string Overrides SerialBox.BaseClasses.SerializerBase<string>.Name See Also SerializerBase<T> Methods | Improve this Doc View Source Deserialize(Type, string) Deserializes the data Declaration public override object? Deserialize(Type objectType, string data) Parameters Type Name Description Type objectType Object type string data Data to deserialize Returns Type Description object The deserialized data Overrides SerializerBase<string>.Deserialize(Type, string) See Also SerializerBase<T> | Improve this Doc View Source Serialize(Type, object?) Serializes the object Declaration public override string Serialize(Type objectType, object? data) Parameters Type Name Description Type objectType Object type object data Data to serialize Returns Type Description string The serialized data Overrides SerializerBase<string>.Serialize(Type, object) See Also SerializerBase<T> Implements ISerializer<T> ISerializer See Also SerializerBase<T>"
  },
  "api/TestFountain.Exceptions.GeneratorException.html": {
    "href": "api/TestFountain.Exceptions.GeneratorException.html",
    "title": "Class GeneratorException | TestFountain API Reference",
    "keywords": "Class GeneratorException Generator exception Inheritance object Exception GeneratorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: TestFountain.Exceptions Assembly: TestFountain.dll Syntax public class GeneratorException : Exception, ISerializable Constructors | Improve this Doc View Source GeneratorException() Initializes a new instance of the GeneratorException class. Declaration public GeneratorException() See Also Exception | Improve this Doc View Source GeneratorException(SerializationInfo, StreamingContext) Initializes a new instance of the GeneratorException class. Declaration protected GeneratorException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. See Also Exception | Improve this Doc View Source GeneratorException(string) Initializes a new instance of the GeneratorException class. Declaration public GeneratorException(string message) Parameters Type Name Description string message The message that describes the error. See Also Exception | Improve this Doc View Source GeneratorException(string, Exception) Initializes a new instance of the GeneratorException class. Declaration public GeneratorException(string message, Exception innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. See Also Exception Implements ISerializable See Also Exception"
  },
  "api/TestFountain.Exceptions.html": {
    "href": "api/TestFountain.Exceptions.html",
    "title": "Namespace TestFountain.Exceptions | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Exceptions Classes GeneratorException Generator exception"
  },
  "api/TestFountain.FountainDataAttribute.html": {
    "href": "api/TestFountain.FountainDataAttribute.html",
    "title": "Class FountainDataAttribute | TestFountain API Reference",
    "keywords": "Class FountainDataAttribute Data generator class used in theory methods. Inheritance object Attribute DataAttribute FountainDataAttribute Inherited Members DataAttribute.Skip Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain Assembly: TestFountain.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public sealed class FountainDataAttribute : DataAttribute Constructors | Improve this Doc View Source FountainDataAttribute(int, int) Initializes a new instance of the FountainDataAttribute class. Declaration public FountainDataAttribute(int count, int maxDuration = 2147483647) Parameters Type Name Description int count The number of items to generate. int maxDuration The duration in ms. (overrides the count) See Also DataAttribute Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description int The count. See Also DataAttribute | Improve this Doc View Source MaxDuration Gets the duration. Declaration public int MaxDuration { get; } Property Value Type Description int The duration. See Also DataAttribute Methods | Improve this Doc View Source GetData(MethodInfo) Returns the data to be used to test the theory. Declaration public override IEnumerable<object?[]> GetData(MethodInfo testMethod) Parameters Type Name Description MethodInfo testMethod The method that is being tested Returns Type Description IEnumerable<object[]> One or more sets of theory data. Each invocation of the test method is represented by a single object array. Overrides DataAttribute.GetData(MethodInfo) See Also DataAttribute See Also DataAttribute"
  },
  "api/TestFountain.Generator.DefaultGenerators.BoundaryGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.BoundaryGenerator.html",
    "title": "Class BoundaryGenerator | TestFountain API Reference",
    "keywords": "Class BoundaryGenerator Boundary generator Inheritance object BoundaryGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.Generator.DefaultGenerators Assembly: TestFountain.dll Syntax public class BoundaryGenerator : IGenerator Constructors | Improve this Doc View Source BoundaryGenerator(Random) Initializes a new instance of the BoundaryGenerator class. Declaration public BoundaryGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo) Generates the next object of the specified parameter type. Declaration public object Next(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description object The next object. See Also IGenerator Implements IGenerator See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.DefaultGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.DefaultGenerator.html",
    "title": "Class DefaultGenerator | TestFountain API Reference",
    "keywords": "Class DefaultGenerator Default generator Inheritance object DefaultGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.Generator.DefaultGenerators Assembly: TestFountain.dll Syntax public class DefaultGenerator : IGenerator Constructors | Improve this Doc View Source DefaultGenerator(Random) Initializes a new instance of the DefaultGenerator class. Declaration public DefaultGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description object The next object. See Also IGenerator Implements IGenerator See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.DefaultValueGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.DefaultValueGenerator.html",
    "title": "Class DefaultValueGenerator | TestFountain API Reference",
    "keywords": "Class DefaultValueGenerator Default value generator Inheritance object DefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.Generator.DefaultGenerators Assembly: TestFountain.dll Syntax public class DefaultValueGenerator : IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description object The next object. See Also IGenerator Implements IGenerator See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.html",
    "title": "Namespace TestFountain.Generator.DefaultGenerators | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Generator.DefaultGenerators Classes BoundaryGenerator Boundary generator DefaultGenerator Default generator DefaultValueGenerator Default value generator InterfaceGenerator Interface generator ParameterDefaultValueGenerator Parameter default value generator"
  },
  "api/TestFountain.Generator.DefaultGenerators.InterfaceGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.InterfaceGenerator.html",
    "title": "Class InterfaceGenerator | TestFountain API Reference",
    "keywords": "Class InterfaceGenerator Interface generator Inheritance object InterfaceGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.Generator.DefaultGenerators Assembly: TestFountain.dll Syntax public class InterfaceGenerator : IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo) Generates the next object of the specified parameter type. Declaration public object Next(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description object The next object. See Also IGenerator Implements IGenerator See Also IGenerator"
  },
  "api/TestFountain.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html": {
    "href": "api/TestFountain.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html",
    "title": "Class ParameterDefaultValueGenerator | TestFountain API Reference",
    "keywords": "Class ParameterDefaultValueGenerator Parameter default value generator Inheritance object ParameterDefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.Generator.DefaultGenerators Assembly: TestFountain.dll Syntax public class ParameterDefaultValueGenerator : IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo) Generates the next object of the specified parameter type. Declaration public object Next(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description object The next object. See Also IGenerator Implements IGenerator See Also IGenerator"
  },
  "api/TestFountain.Generator.GeneratorManager.html": {
    "href": "api/TestFountain.Generator.GeneratorManager.html",
    "title": "Class GeneratorManager | TestFountain API Reference",
    "keywords": "Class GeneratorManager Generator manager Inheritance object GeneratorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TestFountain.Generator Assembly: TestFountain.dll Syntax public class GeneratorManager Constructors | Improve this Doc View Source GeneratorManager(IEnumerable<IGenerator>, Random) Initializes a new instance of the GeneratorManager class. Declaration public GeneratorManager(IEnumerable<IGenerator> generators, Random random) Parameters Type Name Description IEnumerable<IGenerator> generators The generators. Random random The random. Properties | Improve this Doc View Source Generators Gets the generators. Declaration public IEnumerable<IGenerator> Generators { get; } Property Value Type Description IEnumerable<IGenerator> The generators. | Improve this Doc View Source Random Gets the random. Declaration public Random Random { get; } Property Value Type Description Random The random. Methods | Improve this Doc View Source Next(ParameterInfo[]) Gets the next set of parameter values. Declaration public object?[] Next(ParameterInfo[] parameters) Parameters Type Name Description ParameterInfo[] parameters The parameters. Returns Type Description object[] The values."
  },
  "api/TestFountain.Generator.html": {
    "href": "api/TestFountain.Generator.html",
    "title": "Namespace TestFountain.Generator | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Generator Classes GeneratorManager Generator manager"
  },
  "api/TestFountain.Generator.Interfaces.html": {
    "href": "api/TestFountain.Generator.Interfaces.html",
    "title": "Namespace TestFountain.Generator.Interfaces | TestFountain API Reference",
    "keywords": "Namespace TestFountain.Generator.Interfaces Interfaces IGenerator Generator interface."
  },
  "api/TestFountain.Generator.Interfaces.IGenerator.html": {
    "href": "api/TestFountain.Generator.Interfaces.IGenerator.html",
    "title": "Interface IGenerator | TestFountain API Reference",
    "keywords": "Interface IGenerator Generator interface. Namespace: TestFountain.Generator.Interfaces Assembly: TestFountain.dll Syntax public interface IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo) Determines whether this instance can generate the specified parameter. Declaration bool CanGenerate(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. | Improve this Doc View Source Next(ParameterInfo) Generates the next object of the specified parameter type. Declaration object? Next(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description object The next object."
  },
  "api/TestFountain.html": {
    "href": "api/TestFountain.html",
    "title": "Namespace TestFountain | TestFountain API Reference",
    "keywords": "Namespace TestFountain Classes FountainDataAttribute Data generator class used in theory methods."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | TestFountain API Reference",
    "keywords": "Code using System.ComponentModel.DataAnnotations; using Xunit; namespace TestFountain.Example { public class ExampleClass { /// <summary> /// Runs 10 tests with random values for a and b. /// </summary> /// <param name=\"a\">a, values will be in the range of 0 to 1000.</param> /// <param name=\"b\">b, values will be in the range of 0 to 1000.</param> [Theory] [FountainData(10)] public void Method1([Range(0, 1000)] int a, [Range(0, 1000)] int b) { Assert.True(0 <= a && a <= 1000); Assert.True(0 <= b && b <= 1000); } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "TestFountain | TestFountain API Reference",
    "keywords": "TestFountain TestFountain is a C# library that provides an attribute for xUnit.Net to generate random test data. It aims to simplify the process of generating diverse and comprehensive test cases by automatically creating random input values for your xUnit.Net tests. Features Random Data Generation: TestFountain allows you to easily generate random test data for your xUnit.Net tests. By using the FountainDataAttribute, you can annotate your test methods and have them automatically receive randomized input parameters. Customization: You can customize the generated data by specifying the data type, range, length, and other attributes using various options provided by TestFountain. Simplified Test Cases: With TestFountain, you no longer need to manually define and manage multiple test cases. It generates a wide range of test inputs automatically, allowing you to focus on writing assertions and verifying the behavior of your code. Getting Started Prerequisites .NET 6 Installation You can install TestFountain via NuGet package manager or by adding a reference to your project file. Using NuGet Package Manager Open the NuGet Package Manager Console in Visual Studio. Execute the following command: Install-Package TestFountain Adding a Reference Right-click on your project in Visual Studio. Select \"Manage NuGet Packages.\" Search for \"TestFountain\" and click on \"Install.\" Usage To use TestFountain in your xUnit.Net tests, follow these steps: Annotate your test method with the RandomDataAttribute and specify the desired options: [Theory] [FountainData] public void MyRandomTestMethod(int randomNumber, string randomString) { // Use the random values for testing } In this example, randomNumber and randomString will be automatically populated with random values each time the test runs. Customize the generated data by using the available options. For example: [Theory] [FountainData(10)] public void MyRandomTestMethod(int randomNumber) { // Use the random integer value between 0 and 100 for testing } Run your xUnit.Net tests as usual, and TestFountain will generate random test data for your annotated test methods."
  }
}